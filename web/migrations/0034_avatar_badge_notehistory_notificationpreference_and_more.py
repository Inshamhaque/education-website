# Generated by Django 5.1.6 on 2025-03-24 20:11

import uuid

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("web", "0033_gradeablelink_linkgrade"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Avatar",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("style", models.CharField(default="circle", max_length=50)),
                ("background_color", models.CharField(default="#FFFFFF", max_length=7)),
                ("top", models.CharField(default="short_flat", max_length=50)),
                ("eyebrows", models.CharField(default="default", max_length=50)),
                ("eyes", models.CharField(default="default", max_length=50)),
                ("nose", models.CharField(default="default", max_length=50)),
                ("mouth", models.CharField(default="default", max_length=50)),
                ("facial_hair", models.CharField(default="none", max_length=50)),
                ("skin_color", models.CharField(default="light", max_length=50)),
                ("hair_color", models.CharField(default="#000000", max_length=7)),
                ("accessory", models.CharField(default="none", max_length=50)),
                ("clothing", models.CharField(default="hoodie", max_length=50)),
                ("clothing_color", models.CharField(default="#0000FF", max_length=7)),
                ("svg", models.TextField(blank=True, help_text="Stored SVG string of the custom avatar")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="Badge",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField()),
                ("image", models.ImageField(upload_to="badges/")),
                (
                    "badge_type",
                    models.CharField(
                        choices=[
                            ("challenge", "Challenge Completion"),
                            ("course", "Course Completion"),
                            ("achievement", "Special Achievement"),
                            ("teacher_awarded", "Teacher Awarded"),
                        ],
                        max_length=20,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("criteria", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["badge_type", "name"],
            },
        ),
        migrations.CreateModel(
            name="NoteHistory",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("content", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="NotificationPreference",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "reminder_days_before",
                    models.IntegerField(default=3, help_text="Days before deadline to send first reminder"),
                ),
                (
                    "reminder_hours_before",
                    models.IntegerField(default=24, help_text="Hours before deadline to send final reminder"),
                ),
                ("email_notifications", models.BooleanField(default=True)),
                ("in_app_notifications", models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name="PeerChallenge",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[("active", "Active"), ("completed", "Completed"), ("cancelled", "Cancelled")],
                        default="active",
                        max_length=10,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Peer Challenge",
                "verbose_name_plural": "Peer Challenges",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PeerChallengeInvitation",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("accepted", "Accepted"),
                            ("completed", "Completed"),
                            ("declined", "Declined"),
                            ("expired", "Expired"),
                        ],
                        default="pending",
                        max_length=10,
                    ),
                ),
                ("message", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Points",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("amount", models.PositiveIntegerField(default=0)),
                ("reason", models.CharField(help_text="Reason for awarding points", max_length=255)),
                (
                    "point_type",
                    models.CharField(
                        choices=[("regular", "Regular Points"), ("streak", "Streak Points"), ("bonus", "Bonus Points")],
                        default="regular",
                        max_length=20,
                    ),
                ),
                ("awarded_at", models.DateTimeField(auto_now_add=True)),
                ("current_streak", models.PositiveIntegerField(blank=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name_plural": "Points",
            },
        ),
        migrations.CreateModel(
            name="StudyGroupInvite",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("responded_at", models.DateTimeField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[("pending", "Pending"), ("accepted", "Accepted"), ("declined", "Declined")],
                        default="pending",
                        max_length=20,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UserBadge",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "award_method",
                    models.CharField(
                        choices=[
                            ("challenge_completion", "Challenge Completion"),
                            ("course_completion", "Course Completion"),
                            ("teacher_awarded", "Teacher Awarded"),
                            ("system_awarded", "System Awarded"),
                        ],
                        max_length=20,
                    ),
                ),
                ("awarded_at", models.DateTimeField(auto_now_add=True)),
                ("award_message", models.TextField(blank=True)),
            ],
            options={
                "ordering": ["-awarded_at"],
            },
        ),
        migrations.AddField(
            model_name="challenge",
            name="challenge_type",
            field=models.CharField(
                choices=[("weekly", "Weekly Challenge"), ("one_time", "One-time Challenge")],
                default="weekly",
                max_length=10,
            ),
        ),
        migrations.AddField(
            model_name="challengesubmission",
            name="points_awarded",
            field=models.PositiveIntegerField(default=10),
        ),
        migrations.AddField(
            model_name="coursematerial",
            name="due_date",
            field=models.DateTimeField(blank=True, help_text="Deadline for assignment submission", null=True),
        ),
        migrations.AddField(
            model_name="coursematerial",
            name="final_reminder_sent",
            field=models.BooleanField(default=False, help_text="Whether a final reminder has been sent"),
        ),
        migrations.AddField(
            model_name="coursematerial",
            name="reminder_sent",
            field=models.BooleanField(default=False, help_text="Whether an early reminder has been sent"),
        ),
        migrations.AddField(
            model_name="donation",
            name="award_points",
            field=models.BooleanField(default=True, help_text="Award points to user for donation"),
        ),
        migrations.AddField(
            model_name="donation",
            name="points_multiplier",
            field=models.DecimalField(
                decimal_places=2, default=1.0, help_text="Points per dollar multiplier", max_digits=5
            ),
        ),
        migrations.AddField(
            model_name="goods",
            name="is_reward",
            field=models.BooleanField(default=False, help_text="Can be unlocked as achievement reward"),
        ),
        migrations.AddField(
            model_name="goods",
            name="points_required",
            field=models.PositiveIntegerField(blank=True, help_text="Points needed to unlock this reward", null=True),
        ),
        migrations.AddField(
            model_name="profile",
            name="how_did_you_hear_about_us",
            field=models.TextField(blank=True, help_text="How did you hear about us? You can enter text or a link."),
        ),
        migrations.AddField(
            model_name="profile",
            name="is_profile_public",
            field=models.BooleanField(
                default=False, help_text="Toggle to make your profile public so your details and stats are visible."
            ),
        ),
        migrations.AddField(
            model_name="session",
            name="latitude",
            field=models.DecimalField(
                blank=True,
                decimal_places=6,
                help_text="Latitude coordinate for mapping",
                max_digits=9,
                null=True,
                validators=[
                    django.core.validators.MinValueValidator(-90),
                    django.core.validators.MaxValueValidator(90),
                ],
            ),
        ),
        migrations.AddField(
            model_name="session",
            name="longitude",
            field=models.DecimalField(
                blank=True,
                decimal_places=6,
                help_text="Longitude coordinate for mapping",
                max_digits=9,
                null=True,
                validators=[
                    django.core.validators.MinValueValidator(-180),
                    django.core.validators.MaxValueValidator(180),
                ],
            ),
        ),
        migrations.AddField(
            model_name="session",
            name="teaching_style",
            field=models.CharField(
                blank=True,
                choices=[
                    ("lecture", "Lecture Based"),
                    ("student-centered", "Student Centered"),
                    ("hybrid", "Hybrid Learning"),
                    ("practical", "Practical Learning"),
                ],
                default="hybrid",
                help_text="What is the teachng style of session",
                max_length=20,
            ),
        ),
        migrations.AlterField(
            model_name="challenge",
            name="week_number",
            field=models.PositiveIntegerField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="profile",
            name="avatar",
            field=models.ImageField(blank=True, default="", upload_to="avatars"),
        ),
        migrations.AlterField(
            model_name="studygroup",
            name="members",
            field=models.ManyToManyField(blank=True, related_name="joined_groups", to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name="challengesubmission",
            unique_together={("user", "challenge")},
        ),
        migrations.AddConstraint(
            model_name="challenge",
            constraint=models.UniqueConstraint(
                condition=models.Q(("challenge_type", "weekly")),
                fields=("week_number",),
                name="unique_week_number_for_weekly_challenges",
            ),
        ),
        migrations.AddField(
            model_name="profile",
            name="custom_avatar",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="profile",
                to="web.avatar",
            ),
        ),
        migrations.AddField(
            model_name="badge",
            name="challenge",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="badges",
                to="web.challenge",
            ),
        ),
        migrations.AddField(
            model_name="badge",
            name="course",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="badges",
                to="web.course",
            ),
        ),
        migrations.AddField(
            model_name="badge",
            name="created_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="created_badges", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="notehistory",
            name="created_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="note_history_entries",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="notehistory",
            name="enrollment",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="note_history", to="web.enrollment"
            ),
        ),
        migrations.AddField(
            model_name="notificationpreference",
            name="user",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="notification_preferences",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="peerchallenge",
            name="creator",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="created_challenges",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="peerchallenge",
            name="quiz",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="peer_challenges", to="web.quiz"
            ),
        ),
        migrations.AddField(
            model_name="peerchallengeinvitation",
            name="challenge",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="invitations", to="web.peerchallenge"
            ),
        ),
        migrations.AddField(
            model_name="peerchallengeinvitation",
            name="participant",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="challenge_invitations",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="peerchallengeinvitation",
            name="user_quiz",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="challenge_invitation",
                to="web.userquiz",
            ),
        ),
        migrations.AddField(
            model_name="points",
            name="challenge",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="points_awarded",
                to="web.challenge",
            ),
        ),
        migrations.AddField(
            model_name="points",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="points", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="studygroupinvite",
            name="group",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="invites", to="web.studygroup"
            ),
        ),
        migrations.AddField(
            model_name="studygroupinvite",
            name="recipient",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="received_group_invites",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="studygroupinvite",
            name="sender",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="sent_group_invites",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="userbadge",
            name="awarded_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="awarded_badges",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="userbadge",
            name="badge",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="awarded_to", to="web.badge"
            ),
        ),
        migrations.AddField(
            model_name="userbadge",
            name="challenge_submission",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="badges",
                to="web.challengesubmission",
            ),
        ),
        migrations.AddField(
            model_name="userbadge",
            name="course_enrollment",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="badges",
                to="web.enrollment",
            ),
        ),
        migrations.AddField(
            model_name="userbadge",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="badges", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AlterUniqueTogether(
            name="peerchallengeinvitation",
            unique_together={("challenge", "participant")},
        ),
        migrations.AddIndex(
            model_name="points",
            index=models.Index(fields=["user", "awarded_at"], name="web_points_user_id_3acb2a_idx"),
        ),
        migrations.AddIndex(
            model_name="points",
            index=models.Index(fields=["awarded_at"], name="web_points_awarded_c490d6_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="studygroupinvite",
            unique_together={("group", "recipient")},
        ),
        migrations.AlterUniqueTogether(
            name="userbadge",
            unique_together={("user", "badge")},
        ),
    ]
